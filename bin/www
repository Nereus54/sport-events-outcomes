#!/usr/bin/env node

/**
 * Module dependencies.
 */

//APP DEPENDENCIES
let
    app     = require('../app'),
    debug   = require('debug')('api-example:server'),
    config  = require('../config/config.js');

//CLUSTER DEPENDENCIES
const
    cluster = require('cluster'),
    http    = require('http'),
    numCPUs = require('os').cpus().length;

/**
 * Start cluster
 * */
if (cluster.isMaster) {
    app.logger.info(`Master ${process.pid} is running`);

    let server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    // Fork workers.
    for (let i = 0; i < numCPUs; i++) {
        cluster.fork();
    }

    //Check if work died
    cluster.on('exit', (worker, code, signal) => {
        app.logger.error(`Worker ${worker.process.pid} died`);
    });

} else {
    /**
     * Get port from environment and store in Express.
     */

    const port = normalizePort(config.port || '3000');
    app.set('port', port);

    /**
     * Create HTTP server.
     */

    let server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */

    server.listen(port);
    console.log('PORT: '+port);
    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Normalize a port into a number, string, or false.
     */

    function normalizePort(val) {
        let port = parseInt(val, 10);

        if (isNaN(port)) {
            // named pipe
            return val;
        }

        if (port >= 0) {
            // port number
            return port;
        }

        return false;
    }

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        let bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                app.logger.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                app.logger.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        let addr = server.address();
        let bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }
}
